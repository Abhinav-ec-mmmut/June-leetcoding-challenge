Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.

For example, given an input list of values [1, 9], when we pick up a number out of it, the chance is that 9 times out of 10 we should pick the number 9 as the answer.

Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]
Example 2:

Input: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.

 

Constraints:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
C++	
1
class Solution {
2
public:
3
    vector<int> cum;int sum;
4
    Solution(vector<int>& w) {
5
      sum=0;
6
        for(int i:w){
7
            sum+=i;
8
            cum.push_back(sum);
9
        }
10
    }
11
    
12
    int pickIndex() {
13
       int idx=rand()%sum;
14
        return bsrch(idx+1);
15
    }
16
    int bsrch(int idx){
17
        int l=0;
18
        int r=cum.size()-1;
19
        while(l<r){
20
            int mid=l+ (r-l)/2;
21
            if(cum[mid]<idx){
22
                l=mid+1;
23
            }
24
            else{
25
                r=mid;
26
            }
27
        }
28
        return l;
29
    }
30
};
31
â€‹
32
/**
33
 * Your Solution object will be instantiated and called as such:
34
 * Solution* obj = new Solution(w);
35
 * int param_1 = obj->pickIndex();
36
 */
